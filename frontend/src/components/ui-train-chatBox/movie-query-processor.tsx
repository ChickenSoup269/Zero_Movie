/* eslint-disable @typescript-eslint/no-explicit-any */
import { MovieService } from "@/services/movieService"
import { GenreService } from "@/services/genreService"

// Phi√™n b·∫£n c·∫£i ti·∫øn c·ªßa h√†m validateMovieData
const validateMovieData = (movie: any) => {
  const validatedMovie = { ...movie }
  if (
    validatedMovie.tmdbId === undefined ||
    validatedMovie.tmdbId === null ||
    Number.isNaN(Number(validatedMovie.tmdbId)) ||
    validatedMovie.tmdbId <= 0
  ) {
    console.warn(
      `Invalid tmdbId for movie ${validatedMovie.title || "unknown"}: ${
        validatedMovie.tmdbId
      }`
    )
    return null
  }
  validatedMovie.tmdbId = Number(validatedMovie.tmdbId)
  return validatedMovie
}

export class MovieQueryProcessor {
  /**
   * Process movie-related queries and return appropriate responses
   * @param query User's query string
   * @param userId User's ID for personalized recommendations
   * @returns Response to the query or null if not a movie-related query
   */
  static async processQuery(query: string, userId?: string): Promise<any> {
    const lowerQuery = query.toLowerCase().trim()

    // Ki·ªÉm tra truy v·∫•n c√≥ ch·ª©a t·ª´ v√¥ nghƒ©a d√†i
    const hasInvalidPrefix = /^\w{5,}\s/i.test(lowerQuery)
    if (hasInvalidPrefix) {
      console.log("Truy v·∫•n kh√¥ng h·ª£p l·ªá, ch·ª©a t·ª´ v√¥ nghƒ©a:", lowerQuery)
      return null // Chuy·ªÉn sang Gemini API
    }

    // ƒê·∫∑t v√© phim (h·ªó tr·ª£ bi·∫øn th·ªÉ "t√¥i mu·ªën ƒë·∫∑t v√©" v√† "t√¥i mu·ªën ƒë·∫∑t v√© phim")
    const ticketBookingRegex =
      /(?:t√¥i mu·ªën ƒë·∫∑t v√©|ƒë·∫∑t v√© phim)(?:\s*phim)?\s+(.+)/i
    const ticketMatch = lowerQuery.match(ticketBookingRegex)
    if (ticketMatch) {
      const movieTitle = ticketMatch[1].trim()
      return this.processTicketBooking(movieTitle)
    }

    // Xem chi ti·∫øt phim
    if (
      lowerQuery.includes("t√¥i mu·ªën xem chi ti·∫øt") ||
      lowerQuery.includes("xem chi ti·∫øt phim")
    ) {
      return this.getMovieDetailsWithLink(lowerQuery)
    }

    // G·ª£i √Ω phim
    if (
      lowerQuery.includes("phim ph√π h·ª£p v·ªõi tui") ||
      lowerQuery.includes("g·ª£i √Ω phim cho t√¥i") ||
      lowerQuery.includes("phim ƒë·ªÅ xu·∫•t") ||
      lowerQuery.includes("phim n√™n xem")
    ) {
      return this.getPersonalizedRecommendations(userId)
    }

    // Phim theo th·ªÉ lo·∫°i
    if (
      lowerQuery.includes("phim th·ªÉ lo·∫°i") ||
      lowerQuery.includes("t√¨m phim th·ªÉ lo·∫°i") ||
      lowerQuery.includes("phim thu·ªôc th·ªÉ lo·∫°i")
    ) {
      return this.getMoviesByGenre(lowerQuery)
    }

    // S·ªë l∆∞·ª£ng phim
    if (
      lowerQuery.includes("bao nhi√™u phim") ||
      lowerQuery.includes("s·ªë l∆∞·ª£ng phim") ||
      lowerQuery.includes("ƒë·∫øm s·ªë phim") ||
      lowerQuery.includes("t·ªïng s·ªë phim") ||
      lowerQuery.includes("c√≥ m·∫•y phim") ||
      lowerQuery.includes("c√≥ bao nhi√™u b·ªô phim")
    ) {
      return this.getMovieCount()
    }

    // Phim n·ªïi b·∫≠t
    if (
      lowerQuery.includes("phim n·ªïi b·∫≠t") ||
      lowerQuery.includes("phim ƒë√°ng xem") ||
      lowerQuery.includes("phim ph·ªï bi·∫øn") ||
      lowerQuery.includes("phim hay") ||
      lowerQuery.includes("phim ƒë∆∞·ª£c y√™u th√≠ch")
    ) {
      return this.getFeaturedMovies()
    }

    // Phim m·ªõi nh·∫•t
    if (
      lowerQuery.includes("phim m·ªõi") ||
      lowerQuery.includes("phim m·ªõi nh·∫•t") ||
      lowerQuery.includes("phim g·∫ßn ƒë√¢y") ||
      lowerQuery.includes("phim v·ª´a ra m·∫Øt")
    ) {
      return this.getLatestMovies()
    }

    // Phim ƒë√°nh gi√° cao
    if (
      lowerQuery.includes("phim ƒë√°nh gi√° cao") ||
      lowerQuery.includes("phim hay nh·∫•t") ||
      lowerQuery.includes("phim top") ||
      lowerQuery.includes("phim x·∫øp h·∫°ng cao")
    ) {
      return this.getHighestRatedMovies()
    }

    // Th√¥ng tin th·ªÉ lo·∫°i
    if (
      lowerQuery.includes("th·ªÉ lo·∫°i") ||
      lowerQuery.includes("lo·∫°i phim") ||
      lowerQuery.includes("genre") ||
      lowerQuery.includes("danh m·ª•c")
    ) {
      return this.processGenreQuery(lowerQuery)
    }

    // Th√¥ng tin chi ti·∫øt phim
    if (
      lowerQuery.includes("th√¥ng tin v·ªÅ phim") ||
      lowerQuery.includes("th√¥ng tin phim") ||
      lowerQuery.includes("chi ti·∫øt phim") ||
      lowerQuery.includes("n·ªôi dung phim") ||
      lowerQuery.includes("phim g√¨") ||
      lowerQuery.includes("m√¥ t·∫£ phim")
    ) {
      return this.getMovieDetails(lowerQuery)
    }

    // T√¨m ki·∫øm phim
    if (
      lowerQuery.includes("t√¨m phim") ||
      lowerQuery.includes("t√¨m ki·∫øm phim") ||
      lowerQuery.includes("t√¨m b·ªô phim") ||
      lowerQuery.includes("phim c√≥ t√™n") ||
      lowerQuery.includes("phim t√™n l√†")
    ) {
      return this.searchMovies(lowerQuery)
    }

    // Phim s·∫Øp chi·∫øu
    if (
      lowerQuery.includes("phim s·∫Øp chi·∫øu") ||
      lowerQuery.includes("phim s·∫Øp ra m·∫Øt") ||
      lowerQuery.includes("phim s·∫Øp t·ªõi") ||
      lowerQuery.includes("l·ªãch chi·∫øu phim")
    ) {
      return this.getUpcomingMovies()
    }

    // Phim ƒëang chi·∫øu
    if (
      lowerQuery.includes("phim ƒëang chi·∫øu") ||
      lowerQuery.includes("phim hi·ªán ƒëang chi·∫øu") ||
      lowerQuery.includes("phim hi·ªán t·∫°i")
    ) {
      return this.getNowPlayingMovies()
    }

    // H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
    if (
      lowerQuery.includes("b·∫°n bi·∫øt g√¨") ||
      lowerQuery.includes("b·∫°n c√≥ th·ªÉ l√†m g√¨") ||
      lowerQuery.includes("h∆∞·ªõng d·∫´n") ||
      lowerQuery.includes("tr·ª£ gi√∫p") ||
      lowerQuery.includes("help") ||
      lowerQuery.includes("gi√∫p ƒë·ª°") ||
      lowerQuery === "help"
    ) {
      return this.getHelpMessage()
    }

    return null
  }

  /**
   * Get movie details with a link and poster for "xem chi ti·∫øt" queries
   */
  private static async getMovieDetailsWithLink(
    lowerQuery: string
  ): Promise<any> {
    try {
      let movieTitle = ""
      if (lowerQuery.includes("t√¥i mu·ªën xem chi ti·∫øt")) {
        movieTitle = lowerQuery.split("t√¥i mu·ªën xem chi ti·∫øt")[1].trim()
      } else if (lowerQuery.includes("xem chi ti·∫øt phim")) {
        movieTitle = lowerQuery.split("xem chi ti·∫øt phim")[1].trim()
      }

      if (!movieTitle) {
        return { message: "Vui l√≤ng cung c·∫•p t√™n phim c·ª• th·ªÉ ƒë·ªÉ xem chi ti·∫øt." }
      }

      const movies = await MovieService.searchMovies(movieTitle)
      if (movies.length === 0) {
        return {
          message: `Kh√¥ng t√¨m th·∫•y phim "${movieTitle}". Vui l√≤ng ki·ªÉm tra l·∫°i t√™n phim.`,
        }
      }

      const movie = movies[0]
      if (!movie.tmdbId) {
        return { message: `Phim "${movie.title}" kh√¥ng c√≥ tmdbId h·ª£p l·ªá.` }
      }

      const posterUrl = movie.posterPath
        ? `https://image.tmdb.org/t/p/w200${movie.posterPath}`
        : "/placeholder-image.jpg"
      const detailsLink = `http://localhost:3000/details-movies/${movie.tmdbId}`
      const message =
        `Th√¥ng tin phim "${movie.title}":\n\n` +
        `üìÖ NƒÉm ph√°t h√†nh: ${
          movie.releaseDate
            ? movie.releaseDate.slice(0, 4)
            : "Kh√¥ng c√≥ th√¥ng tin"
        }`

      return {
        message,
        imageUrl: posterUrl,
        link: { url: detailsLink, text: "Xem chi ti·∫øt" },
      }
    } catch (error: any) {
      return {
        message: `R·∫•t ti·∫øc, kh√¥ng th·ªÉ l·∫•y th√¥ng tin chi ti·∫øt phim: ${error.message}`,
      }
    }
  }

  /**
   * Process ticket booking queries
   */
  private static async processTicketBooking(movieTitle: string): Promise<any> {
    try {
      // Ki·ªÉm tra t√™n phim h·ª£p l·ªá
      if (!movieTitle || movieTitle.length < 2 || /^\W+$/.test(movieTitle)) {
        return { message: "Vui l√≤ng cung c·∫•p t√™n phim h·ª£p l·ªá ƒë·ªÉ ƒë·∫∑t v√©." }
      }

      const movies = await MovieService.searchMovies(movieTitle)
      if (movies.length === 0) {
        return {
          message: `Kh√¥ng t√¨m th·∫•y phim "${movieTitle}". Vui l√≤ng ki·ªÉm tra l·∫°i t√™n phim.`,
        }
      }

      const movie = movies[0]
      const validatedMovie = validateMovieData(movie)
      if (!validatedMovie) {
        return { message: `Phim "${movie.title}" kh√¥ng c√≥ tmdbId h·ª£p l·ªá.` }
      }

      if (movie.status !== "nowPlaying") {
        return {
          message: `Phim "${movie.title}" hi·ªán kh√¥ng ph·∫£i phim ƒëang chi·∫øu. Vui l√≤ng ch·ªçn phim kh√°c ho·∫∑c xem l·ªãch chi·∫øu.`,
        }
      }

      const posterUrl = movie.posterPath
        ? `https://image.tmdb.org/t/p/w200${movie.posterPath}`
        : "/placeholder-image.jpg"
      const detailsLink = `http://localhost:3000/details-movies/${movie.tmdbId}`
      const message =
        `ƒê·ªÉ ƒë·∫∑t v√© xem phim "${movie.title}":\n\n` +
        `üìã Quy tr√¨nh ƒë·∫∑t v√©:\n` +
        `1. Ch·ªçn r·∫°p\n` +
        `2. Ch·ªçn ph√≤ng\n` +
        `3. Ch·ªçn th·ªùi gian chi·∫øu\n` +
        `4. Ch·ªçn gh·∫ø\n` +
        `5. Thanh to√°n\n` +
        `‚ö†Ô∏è L∆∞u √Ω: Hi·ªán nay ch·ªâ nh·∫≠n thanh to√°n PayPal`

      return {
        message,
        imageUrl: posterUrl,
        link: { url: detailsLink, text: "Xem chi ti·∫øt" },
      }
    } catch (error: any) {
      return {
        message: `R·∫•t ti·∫øc, kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu ƒë·∫∑t v√©: ${error.message}`,
      }
    }
  }

  /**
   * Get personalized movie recommendations
   */
  private static async getPersonalizedRecommendations(
    userId?: string
  ): Promise<any> {
    try {
      if (!userId) {
        return {
          message: "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ nh·∫≠n g·ª£i √Ω phim ph√π h·ª£p v·ªõi b·∫°n.",
        }
      }

      const movies = await MovieService.getRecommendations(userId)
      if (movies.length === 0) {
        return {
          message:
            "Hi·ªán t·∫°i kh√¥ng c√≥ g·ª£i √Ω phim n√†o ph√π h·ª£p v·ªõi b·∫°n. H√£y th·ª≠ t√¨m ki·∫øm phim theo th·ªÉ lo·∫°i!",
        }
      }

      const movie = movies[0] // Show the top recommendation
      if (!movie.tmdbId) {
        return {
          message: `Phim g·ª£i √Ω "${movie.title}" kh√¥ng c√≥ tmdbId h·ª£p l·ªá.`,
        }
      }

      const posterUrl = movie.posterPath
        ? `https://image.tmdb.org/t/p/w200${movie.posterPath}`
        : "/placeholder-image.jpg"
      const detailsLink = `http://localhost:3000/details-movies/${movie.tmdbId}`
      const message =
        `Phim g·ª£i √Ω cho b·∫°n: "${movie.title}"\n\n` +
        `üìÖ NƒÉm ph√°t h√†nh: ${
          movie.releaseDate
            ? movie.releaseDate.slice(0, 4)
            : "Kh√¥ng c√≥ th√¥ng tin"
        }\n` +
        `‚≠ê ƒê√°nh gi√°: ${movie.voteAverage.toFixed(1)}/10`

      return {
        message,
        imageUrl: posterUrl,
        link: { url: detailsLink, text: "Xem chi ti·∫øt" },
      }
    } catch (error: any) {
      return { message: `R·∫•t ti·∫øc, kh√¥ng th·ªÉ l·∫•y g·ª£i √Ω phim: ${error.message}` }
    }
  }

  /**
   * Get movies by genre
   */
  private static async getMoviesByGenre(lowerQuery: string): Promise<any> {
    try {
      let genreName = ""
      if (lowerQuery.includes("phim th·ªÉ lo·∫°i")) {
        genreName = lowerQuery.split("phim th·ªÉ lo·∫°i")[1].trim()
      } else if (lowerQuery.includes("t√¨m phim th·ªÉ lo·∫°i")) {
        genreName = lowerQuery.split("t√¨m phim th·ªÉ lo·∫°i")[1].trim()
      } else if (lowerQuery.includes("phim thu·ªôc th·ªÉ lo·∫°i")) {
        genreName = lowerQuery.split("phim thu·ªôc th·ªÉ lo·∫°i")[1].trim()
      }

      if (!genreName) {
        return {
          message:
            "Vui l√≤ng cung c·∫•p th·ªÉ lo·∫°i phim c·ª• th·ªÉ (v√≠ d·ª•: h√†i, h√†nh ƒë·ªông).",
        }
      }

      const genres = await GenreService.getGenres()
      const matchedGenre = genres.find((g) =>
        g.name.toLowerCase().includes(genreName)
      )
      if (!matchedGenre) {
        return {
          message: `Kh√¥ng t√¨m th·∫•y th·ªÉ lo·∫°i "${genreName}". H√£y th·ª≠ v·ªõi th·ªÉ lo·∫°i kh√°c nh∆∞ h√†i, h√†nh ƒë·ªông, ho·∫∑c t√¨nh c·∫£m.`,
        }
      }

      const movies = await GenreService.getMoviesByGenre(matchedGenre.name)
      if (movies.length === 0) {
        return {
          message: `Hi·ªán t·∫°i kh√¥ng c√≥ phim n√†o thu·ªôc th·ªÉ lo·∫°i "${matchedGenre.name}" trong h·ªá th·ªëng.`,
        }
      }

      const movie = movies[0] // Show the first movie
      if (!movie.tmdbId) {
        return { message: `Phim "${movie.title}" kh√¥ng c√≥ tmdbId h·ª£p l·ªá.` }
      }

      const posterUrl = movie.posterPath
        ? `https://image.tmdb.org/t/p/w200${movie.posterPath}`
        : "/placeholder-image.jpg"
      const detailsLink = `http://localhost:3000/details-movies/${movie.tmdbId}`
      const message =
        `Phim thu·ªôc th·ªÉ lo·∫°i "${matchedGenre.name}": "${movie.title}"\n\n` +
        `üìÖ NƒÉm ph√°t h√†nh: ${
          movie.releaseDate
            ? movie.releaseDate.slice(0, 4)
            : "Kh√¥ng c√≥ th√¥ng tin"
        }\n` +
        `‚≠ê ƒê√°nh gi√°: ${movie.voteAverage.toFixed(1)}/10`

      return {
        message,
        imageUrl: posterUrl,
        link: { url: detailsLink, text: "Xem chi ti·∫øt" },
      }
    } catch (error: any) {
      return {
        message: `R·∫•t ti·∫øc, kh√¥ng th·ªÉ t√¨m phim theo th·ªÉ lo·∫°i: ${error.message}`,
      }
    }
  }

  /**
   * Get the total count of movies in the system
   */
  private static async getMovieCount(): Promise<string> {
    try {
      const movies = await MovieService.getAllMovies()
      const validatedMovies = movies.map(validateMovieData).filter(Boolean)
      return `Hi·ªán t·∫°i h·ªá th·ªëng c√≥ ${validatedMovies.length} phim.`
    } catch (error: any) {
      return `R·∫•t ti·∫øc, t√¥i kh√¥ng th·ªÉ l·∫•y th√¥ng tin v·ªÅ s·ªë l∆∞·ª£ng phim: ${error.message}`
    }
  }

  /**
   * Get the most featured/popular movies
   */
  private static async getFeaturedMovies(): Promise<string> {
    try {
      const movies = await MovieService.getAllMovies()
      const validatedMovies = movies.map(validateMovieData).filter(Boolean)
      const featuredMovies = [...validatedMovies]
        .sort((a, b) => b.popularity - a.popularity)
        .slice(0, 5)

      let response = "Nh·ªØng phim n·ªïi b·∫≠t hi·ªán t·∫°i:\n"
      featuredMovies.forEach((movie, index) => {
        response += `${index + 1}. ${movie.title} (${movie.releaseDate.slice(
          0,
          4
        )}) - ƒê√°nh gi√°: ${movie.voteAverage.toFixed(1)}/10\n`
      })
      return response
    } catch (error: any) {
      return `R·∫•t ti·∫øc, t√¥i kh√¥ng th·ªÉ l·∫•y th√¥ng tin v·ªÅ phim n·ªïi b·∫≠t: ${error.message}`
    }
  }

  /**
   * Get the latest released movies
   */
  private static async getLatestMovies(): Promise<string> {
    try {
      const movies = await MovieService.getAllMovies()
      const latestMovies = [...movies]
        .filter((movie) => movie.releaseDate)
        .sort(
          (a, b) =>
            new Date(b.releaseDate).getTime() -
            new Date(a.releaseDate).getTime()
        )
        .slice(0, 5)

      let response = "Nh·ªØng phim m·ªõi nh·∫•t:\n"
      latestMovies.forEach((movie, index) => {
        const releaseDate = new Date(movie.releaseDate)
        response += `${index + 1}. ${
          movie.title
        } - Ra m·∫Øt: ${releaseDate.toLocaleDateString("vi-VN")}\n`
      })
      return response
    } catch (error: any) {
      return `R·∫•t ti·∫øc, t√¥i kh√¥ng th·ªÉ l·∫•y th√¥ng tin v·ªÅ phim m·ªõi: ${error.message}`
    }
  }

  /**
   * Get the highest rated movies
   */
  private static async getHighestRatedMovies(): Promise<string> {
    try {
      const movies = await MovieService.getAllMovies()
      const highRatedMovies = [...movies]
        .filter((movie) => movie.voteCount > 10)
        .sort((a, b) => b.voteAverage - a.voteAverage)
        .slice(0, 5)

      let response = "Nh·ªØng phim c√≥ ƒë√°nh gi√° cao nh·∫•t:\n"
      highRatedMovies.forEach((movie, index) => {
        response += `${index + 1}. ${
          movie.title
        } - ƒê√°nh gi√°: ${movie.voteAverage.toFixed(1)}/10 (${
          movie.voteCount
        } l∆∞·ª£t)\n`
      })
      return response
    } catch (error: any) {
      return `R·∫•t ti·∫øc, t√¥i kh√¥ng th·ªÉ l·∫•y th√¥ng tin v·ªÅ phim ƒë√°nh gi√° cao: ${error.message}`
    }
  }

  /**
   * Process queries related to movie genres
   */
  private static async processGenreQuery(lowerQuery: string): Promise<string> {
    if (
      lowerQuery.includes("danh s√°ch") ||
      lowerQuery.includes("li·ªát k√™") ||
      lowerQuery.includes("t·∫•t c·∫£") ||
      lowerQuery.includes("c√≥ nh·ªØng") ||
      lowerQuery.includes("l√† g√¨") ||
      lowerQuery.match(/^th·ªÉ lo·∫°i/)
    ) {
      try {
        const genres = await GenreService.getGenres()
        return `H·ªá th·ªëng c√≥ ${genres.length} th·ªÉ lo·∫°i phim: ${genres
          .map((g) => g.name)
          .join(", ")}.`
      } catch (error: any) {
        return `R·∫•t ti·∫øc, t√¥i kh√¥ng th·ªÉ l·∫•y th√¥ng tin v·ªÅ th·ªÉ lo·∫°i phim: ${error.message}`
      }
    }

    const genreWords = lowerQuery.split(/\s+/)
    try {
      const genres = await GenreService.getGenres()
      const genreNames = genres.map((g) => g.name.toLowerCase())

      for (const genreWord of genreWords) {
        const matchedGenre = genreNames.find(
          (name) =>
            name.includes(genreWord) ||
            name.includes(genreWord.replace("phim", "").trim())
        )

        if (matchedGenre) {
          const exactGenre = genres.find(
            (g) => g.name.toLowerCase() === matchedGenre
          )
          if (exactGenre) {
            const movies = await GenreService.getMoviesByGenre(exactGenre.name)
            if (movies.length > 0) {
              return `C√≥ ${movies.length} phim thu·ªôc th·ªÉ lo·∫°i ${
                exactGenre.name
              }. M·ªôt s·ªë phim ti√™u bi·ªÉu:\n${movies
                .slice(0, 5)
                .map(
                  (m, i) =>
                    `${i + 1}. ${m.title} (${
                      m.releaseDate?.slice(0, 4) || "N/A"
                    })`
                )
                .join("\n")}${
                movies.length > 5 ? "\n...v√† nhi·ªÅu phim kh√°c." : ""
              }`
            } else {
              return `Hi·ªán t·∫°i kh√¥ng c√≥ phim n√†o thu·ªôc th·ªÉ lo·∫°i ${exactGenre.name}.`
            }
          }
        }
      }
      return "Kh√¥ng t√¨m th·∫•y th·ªÉ lo·∫°i phim ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n."
    } catch (error: any) {
      return `R·∫•t ti·∫øc, t√¥i kh√¥ng th·ªÉ l·∫•y th√¥ng tin v·ªÅ phim theo th·ªÉ lo·∫°i: ${error.message}`
    }
  }

  /**
   * Get detailed information about a specific movie
   */
  private static async getMovieDetails(lowerQuery: string): Promise<string> {
    try {
      let movieTitle = ""
      if (lowerQuery.includes("th√¥ng tin v·ªÅ phim")) {
        movieTitle = lowerQuery.split("th√¥ng tin v·ªÅ phim")[1].trim()
      } else if (lowerQuery.includes("th√¥ng tin phim")) {
        movieTitle = lowerQuery.split("th√¥ng tin phim")[1].trim()
      } else if (lowerQuery.includes("chi ti·∫øt phim")) {
        movieTitle = lowerQuery.split("chi ti·∫øt phim")[1].trim()
      } else if (lowerQuery.includes("n·ªôi dung phim")) {
        movieTitle = lowerQuery.split("n·ªôi dung phim")[1].trim()
      } else if (lowerQuery.includes("m√¥ t·∫£ phim")) {
        movieTitle = lowerQuery.split("m√¥ t·∫£ phim")[1].trim()
      }

      if (movieTitle) {
        const movies = await MovieService.searchMovies(movieTitle)
        if (movies.length > 0) {
          const movie = movies[0]
          const genreMap = await GenreService.getGenreMap()
          const genreNames = movie.genreIds
            .map((id) => genreMap[id] || "")
            .filter(Boolean)

          let response = `Th√¥ng tin chi ti·∫øt v·ªÅ phim "${movie.title}":\n\n`
          response += `üìÖ NƒÉm ph√°t h√†nh: ${
            movie.releaseDate
              ? movie.releaseDate.slice(0, 4)
              : "Kh√¥ng c√≥ th√¥ng tin"
          }\n`
          response += `‚≠ê ƒê√°nh gi√°: ${movie.voteAverage.toFixed(1)}/10 (${
            movie.voteCount
          } l∆∞·ª£t)\n`
          response += `üé≠ Th·ªÉ lo·∫°i: ${
            genreNames.join(", ") || "Kh√¥ng c√≥ th√¥ng tin"
          }\n`

          if (movie.director) {
            response += `üé¨ ƒê·∫°o di·ªÖn: ${movie.director}\n`
          }

          if (movie.runtime) {
            const hours = Math.floor(movie.runtime / 60)
            const minutes = movie.runtime % 60
            response += `‚è±Ô∏è Th·ªùi l∆∞·ª£ng: ${hours > 0 ? `${hours} gi·ªù ` : ""}${
              minutes > 0 ? `${minutes} ph√∫t` : ""
            }\n`
          }

          if (movie.overview) {
            response += `\nüìù T√≥m t·∫Øt: ${movie.overview}\n`
          }

          return response
        } else {
          return `Kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ phim "${movieTitle}".`
        }
      }
      return "Vui l√≤ng cung c·∫•p t√™n phim c·ª• th·ªÉ ƒë·ªÉ t√¨m th√¥ng tin chi ti·∫øt."
    } catch (error: any) {
      return `R·∫•t ti·∫øc, t√¥i kh√¥ng th·ªÉ l·∫•y th√¥ng tin chi ti·∫øt v·ªÅ phim: ${error.message}`
    }
  }

  /**
   * Search for movies by name
   */
  private static async searchMovies(lowerQuery: string): Promise<string> {
    let searchTerm = ""
    if (lowerQuery.includes("t√¨m phim")) {
      searchTerm = lowerQuery.split("t√¨m phim")[1].trim()
    } else if (lowerQuery.includes("t√¨m ki·∫øm phim")) {
      searchTerm = lowerQuery.split("t√¨m ki·∫øm phim")[1].trim()
    } else if (lowerQuery.includes("t√¨m b·ªô phim")) {
      searchTerm = lowerQuery.split("t√¨m b·ªô phim")[1].trim()
    } else if (lowerQuery.includes("phim c√≥ t√™n")) {
      searchTerm = lowerQuery.split("phim c√≥ t√™n")[1].trim()
    } else if (lowerQuery.includes("phim t√™n l√†")) {
      searchTerm = lowerQuery.split("phim t√™n l√†")[1].trim()
    }

    if (!searchTerm) {
      return "Vui l√≤ng cung c·∫•p t√™n phim c·∫ßn t√¨m ki·∫øm."
    }

    try {
      console.log(`ƒêang t√¨m ki·∫øm phim v·ªõi t·ª´ kh√≥a: "${searchTerm}"`)
      const movies = await MovieService.searchMovies(searchTerm)
      const validatedMovies = movies
        .map(validateMovieData)
        .filter((movie) => movie !== null)

      if (validatedMovies.length > 0) {
        return `T√¨m th·∫•y ${
          validatedMovies.length
        } phim li√™n quan ƒë·∫øn "${searchTerm}":\n${validatedMovies
          .slice(0, 7)
          .map(
            (m, i) =>
              `${i + 1}. ${m.title} (${m.releaseDate?.slice(0, 4) || "N/A"})`
          )
          .join("\n")}${
          validatedMovies.length > 7 ? "\n...v√† c√°c phim kh√°c." : ""
        }`
      } else {
        return `Kh√¥ng t√¨m th·∫•y phim n√†o c√≥ t√™n "${searchTerm}".`
      }
    } catch (error: any) {
      console.error("L·ªói khi t√¨m ki·∫øm phim:", error)
      if (
        error.message &&
        error.message.includes("Cast to Number failed") &&
        error.message.includes("tmdbId")
      ) {
        return `R·∫•t ti·∫øc, d·ªØ li·ªáu phim ch·ª©a l·ªói (tmdbId kh√¥ng h·ª£p l·ªá). ƒê√£ th√¥ng b√°o ƒë·ªôi k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau.`
      }
      return `R·∫•t ti·∫øc, kh√¥ng th·ªÉ t√¨m ki·∫øm phim: ${
        error.response?.data?.message || error.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh"
      }`
    }
  }

  /**
   * Get upcoming movies
   */
  private static async getUpcomingMovies(): Promise<string> {
    try {
      const movies = await MovieService.getAllMovies()
      const upcomingMovies = movies
        .filter((movie) => movie.status === "upcoming")
        .slice(0, 5)

      if (upcomingMovies.length > 0) {
        let response = "Phim s·∫Øp chi·∫øu:\n"
        upcomingMovies.forEach((movie, index) => {
          response += `${index + 1}. ${movie.title} - D·ª± ki·∫øn: ${
            movie.releaseDate
              ? new Date(movie.releaseDate).toLocaleDateString("vi-VN")
              : "Ch∆∞a c√¥ng b·ªë"
          }\n`
        })
        return response
      } else {
        return "Hi·ªán t·∫°i kh√¥ng c√≥ th√¥ng tin v·ªÅ phim s·∫Øp chi·∫øu."
      }
    } catch (error: any) {
      return `R·∫•t ti·∫øc, t√¥i kh√¥ng th·ªÉ l·∫•y th√¥ng tin v·ªÅ phim s·∫Øp chi·∫øu: ${error.message}`
    }
  }

  /**
   * Get now playing movies
   */
  private static async getNowPlayingMovies(): Promise<string> {
    try {
      const movies = await MovieService.getAllMovies()
      const nowPlayingMovies = movies
        .filter((movie) => movie.status === "nowPlaying")
        .slice(0, 5)

      if (nowPlayingMovies.length > 0) {
        let response = "Phim ƒëang chi·∫øu:\n"
        nowPlayingMovies.forEach((movie, index) => {
          response += `${index + 1}. ${movie.title}\n`
        })
        return response
      } else {
        return "Hi·ªán t·∫°i kh√¥ng c√≥ th√¥ng tin v·ªÅ phim ƒëang chi·∫øu."
      }
    } catch (error: any) {
      return `R·∫•t ti·∫øc, t√¥i kh√¥ng th·ªÉ l·∫•y th√¥ng tin v·ªÅ phim ƒëang chi·∫øu: ${error.message}`
    }
  }

  private static getHelpMessage(): string {
    return `T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªõi c√°c th√¥ng tin v·ªÅ phim v√† nhi·ªÅu ch·ªß ƒë·ªÅ kh√°c:

1. S·ªë l∆∞·ª£ng phim: "C√≥ bao nhi√™u phim?"
2. Danh s√°ch th·ªÉ lo·∫°i: "Li·ªát k√™ c√°c th·ªÉ lo·∫°i phim"
3. T√¨m phim theo t√™n: "T√¨m phim Avengers"
4. Th√¥ng tin chi ti·∫øt: "Th√¥ng tin phim The Godfather"
5. Xem chi ti·∫øt phim: "T√¥i mu·ªën xem chi ti·∫øt The Godfather"
6. ƒê·∫∑t v√© phim: "T√¥i mu·ªën ƒë·∫∑t v√© The Godfather"
7. Phim theo th·ªÉ lo·∫°i: "Phim th·ªÉ lo·∫°i h√†i"
8. G·ª£i √Ω phim: "Phim ph√π h·ª£p v·ªõi tui"
9. Phim m·ªõi nh·∫•t: "Phim m·ªõi nh·∫•t"
10. Phim ƒë∆∞·ª£c ƒë√°nh gi√° cao: "Phim ƒë√°nh gi√° cao"
11. Phim ph·ªï bi·∫øn: "Phim n·ªïi b·∫≠t"
12. Phim s·∫Øp chi·∫øu: "Phim s·∫Øp chi·∫øu"
13. Phim ƒëang chi·∫øu: "Phim ƒëang chi·∫øu"

Ngo√†i ra, b·∫°n c√≥ th·ªÉ h·ªèi b·∫•t k·ª≥ c√¢u h·ªèi n√†o, t·ª´ √¢m nh·∫°c, l·ªãch s·ª≠, ƒë·∫øn c√¥ng ngh·ªá!`
  }
}
